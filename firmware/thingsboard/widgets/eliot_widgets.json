{
  "widgetsBundle": {
    "alias": "ota_for_esp32_widget22",
    "title": "ELIoT Widgets",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "esp32",
      "name": "Eliot Device Widget",
      "descriptor": {
        "type": "latest",
        "sizeX": 9.5,
        "sizeY": 6,
        "resources": [],
        "templateHtml": "<div layout=\"column\" layout-fill layout-padding style=\"overflow: auto\">\r\n    <md-input-container>\r\n        <label>Last config ID:{{ data_id }}</label>\r\n    </md-input-container>\r\n    \r\n    <md-input-container>\r\n        <label>Last activity:{{ lastActivityTime }}</label>\r\n    </md-input-container>\r\n    \r\n    <form layout=\"column\" cname=\"esp32OtaUpdateConfigForm\" ng-submit=\"updateOtaConfig()\">\r\n        <md-input-container ng-class=\"{'show-label': settings.showLabel}\" class=\"attr-input\" ng-show=\"do_ota\">\r\n            <label>Target firmware version</label>\r\n            <input name=\"fw_v\"\r\n                   type=\"number\"\r\n                   ng-model=\"fw_v\"\r\n                   ng-disabled=\"!do_ota\">\r\n        </md-input-container>\r\n        <md-input-container ng-class=\"{'show-label': settings.showLabel}\" class=\"attr-input\" ng-show=\"do_ota\">\r\n            <label>Firmware binary URL</label>\r\n            <input name=\"fw_url\" ng-model=\"fw_url\" type=\"url\" ng-disabled=\"!do_ota\"/>\r\n        </md-input-container>\r\n        <div layout=\"row\">\r\n            <input id=\"input-file\" class=\"ng-hide\" type=\"file\"/>\r\n            <label for=\"input-file\" class=\"md-button md-raised md-primary\" ng-show=\"do_ota\">Choose file</label>\r\n        </div>\r\n        <md-input-container ng-class=\"{'show-label': settings.showLabel}\" class=\"attr-input\" ng-show=\"do_ota\">\r\n            <label>Firmware MD5</label>\r\n            <input matInput name=\"fw_md5\"\r\n                   ng-model=\"fw_md5\"\r\n                   ng-disabled=\"!do_ota\"\r\n                   md-maxlength=\"32\">\r\n        </md-input-container>\r\n        <md-input-container>\r\n            <label>Water sensors interval (mins)</label>\r\n            <md-select ng-model=\"was_int\">\r\n                <md-option ng-value=\"item\" ng-repeat=\"item in WAKEUP_SCHEDULE_VALID_VALUES\">{{ item }}\r\n                </md-option>\r\n            </md-select>\r\n        </md-input-container>\r\n        <md-input-container>\r\n            <label>Atmos41 station interval (mins)</label>\r\n            <md-select ng-model=\"wes_int\">\r\n                <md-option ng-value=\"item\" ng-repeat=\"item in WAKEUP_SCHEDULE_VALID_VALUES\">{{ item }}\r\n                </md-option>\r\n            </md-select>\r\n        </md-input-container>\r\n        <md-input-container>\r\n            <label>Soil moisture interval (mins)</label>\r\n            <md-select ng-model=\"sm_int\">\r\n                <md-option ng-value=\"item\" ng-repeat=\"item in WAKEUP_SCHEDULE_VALID_VALUES\">{{ item }}\r\n                </md-option>\r\n            </md-select>\r\n        </md-input-container>\r\n        <md-input-container class=\"attr-input\">\r\n            <label>Call home interval (mins)</label>\r\n            <md-select ng-model=\"ch_int\">\r\n                <md-option ng-value=\"item\" ng-repeat=\"item in WAKEUP_SCHEDULE_VALID_VALUES\">{{ item }}\r\n                </md-option>\r\n            </md-select>\r\n        </md-input-container>\r\n        \r\n        <div layout=\"column\">\r\n            <md-input-container ng-class=\"{'show-label': settings.showLabel}\" class=\"attr-input\">\r\n                <md-switch name=\"do_ota\" ng-model=\"do_ota\">\r\n                    OTA update\r\n                </md-switch>\r\n            \r\n                <md-switch name=\"do_reboot\" ng-model=\"do_reboot\">\r\n                    Reboot\r\n                </md-switch>\r\n            \r\n                <md-switch name=\"do_format\" ng-model=\"do_format\">\r\n                    Format SPIFFS\r\n                </md-switch>\r\n            \r\n                <md-switch name=\"do_rtc\" ng-model=\"do_rtc\">\r\n                    Sync RTC\r\n                </md-switch>\r\n            \r\n                <md-switch name=\"fo_en\" ng-model=\"fo_en\">\r\n                    Enable FO weather station\r\n                </md-switch>\r\n            \r\n                <md-switch name=\"do_fo_scan\" ng-model=\"do_fo_scan\">\r\n                    Scan for FO weather stations\r\n                </md-switch>\r\n            </md-input-container>\r\n        </div>\r\n    \r\n        <div layout=\"row\" layout-align=\"space-between center\">\r\n            <div></div>\r\n           \r\n            <md-button type=\"submit\" class=\"md-primary md-raised\">\r\n                <span>Save</span>\r\n            </md-button>\r\n        </div>\r\n    </form>\r\n</div>",
        "templateCss": "/*.ota-config-form {*/\r\n/*    overflow: hidden; */\r\n/*    height: 100%;*/\r\n/*    display: flex;*/\r\n/*    flex-direction: column;*/\r\n/*}*/\r\n\r\n/*.shared-attr-container {*/\r\n/*  margin-top: 20px;*/\r\n/*  display: flex;*/\r\n/*  flex-direction: column;*/\r\n/*}*/\r\n\r\n/*.attr-input {*/\r\n/*  font-size: 13px;*/\r\n/*  margin: 0 15px;*/\r\n/*}*/\r\n\r\n/*input {*/\r\n/*  font-size: 13px;*/\r\n/*}*/\r\n\r\n/*.start-ota {*/\r\n/*  font-size: 13px;*/\r\n/*  margin: 0 15px;*/\r\n/*  display: flex;*/\r\n/*  justify-content: flex-start;*/\r\n/*}*/\r\n\r\nmd-toast{\r\n    min-width: 0;\r\n}\r\nmd-toast .md-toast-content {\r\n    font-size: 13px!important;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "controllerScript": "let attributeService;\nlet toast;\nlet types;\nlet utils;\nlet settings;\nlet datasource;\nlet subscription;\n\nself.onInit = function () {\n    $scope = self.ctx.$scope;\n    toast = $scope.$injector.get('toast');\n    types = $scope.$injector.get('types');\n    utils = $scope.$injector.get('utils');\n    settings = angular.copy(self.ctx.settings) || {};\n    datasource = self.ctx.datasources[0];\n    subscription = self.ctx.defaultSubscription;\n    $scope.settings = settings;\n    \n    attributeService = $scope.$injector.get('attributeService');\n    $scope.updateOtaConfig = updateOtaConfig;\n    $scope.WAKEUP_SCHEDULE_VALID_VALUES = [0, 1, 2, 3, 4, 5, 10, 15, 20, 30, 60, 120, 240];\n    \n    if (!datasource.entityId) {\n        console.error(\"No entityId found\");\n        return;\n    }\n    getAttributes();\n};\n\nself.onDataUpdated = function () {\n};\n\nself.onResize = function () {\n};\n\nself.onDestroy = function () {\n};\n\nfunction updateOtaConfig() {\n    var fileInpt = document.getElementById('input-file');\n    if (fileInpt.files.length) {\n        uploadFile()\n            .then(r => r.text())\n            .then(url => {\n                $scope.fw_url = url;\n                saveShareAttributes();\n            });\n    } else {\n        saveShareAttributes();\n    }\n}\n\nfunction saveShareAttributes() {\n    // custom type (and id ?) only for testing purposes\n    var entityType = datasource.entityType ? datasource.entityType : \"DEVICE\";\n    var entityId = datasource.entityId;\n    \n    attributeService.saveEntityAttributes(\n        entityType,\n        entityId,\n        types.attributesScope.shared.value,\n        [\n            {\n                key: \"fw_v\",\n                value: $scope.fw_v\n            },\n            {\n                key: \"fw_url\",\n                value: $scope.fw_url\n            },\n            {\n                key: \"fw_md5\",\n                value: $scope.fw_md5\n            },\n            {\n                key: \"was_int\",\n                value: $scope.was_int\n            },\n            {\n                key: \"wes_int\",\n                value: $scope.wes_int\n            },\n            {\n                key: \"sm_int\",\n                value: $scope.sm_int\n            },\n            {\n                key: \"ch_int\",\n                value: $scope.ch_int\n            },\n            {\n                key: \"do_ota\",\n                value: $scope.do_ota\n            },\n            {\n                key: \"do_reboot\",\n                value: $scope.do_reboot\n            },\n            {\n                key: \"do_format\",\n                value: $scope.do_format\n            },\n            {\n                key: \"do_rtc\",\n                value: $scope.do_rtc\n            },\n            {\n                key: \"fo_en\",\n                value: $scope.fo_en\n            },\n            {\n                key: \"do_fo_scan\",\n                value: $scope.do_fo_scan\n            },\n            {\n                key: \"data_id\",\n                value: parseInt(Math.floor(Date.now()/1000))\n            }\n        ]\n    ).then(\n        function success() {\n            toast.showSuccess('Configuration saved', 2000, angular.element(self.ctx.$container), 'bottom right');\n        },\n        function fail() {\n            toast.showError('OTA configuration can not be saved', angular.element(self.ctx.$container), 'bottom right');\n        }\n    );\n}\n\nfunction uploadFile() {\n    var fileInpt = document.getElementById('input-file');\n    var file = fileInpt.files[0];\n    var formData = new FormData();\n    formData.append('data', file);\n    return fetch('http://parnassos.exm.gr:1880/api/ota', {\n        method: 'POST',\n        body: formData\n    });\n}\n\nfunction getAttributes() {\n    // custom type and id only for testing purposes\n    var entityType = datasource.entityType ? datasource.entityType : \"DEVICE\";\n    var entityId = datasource.entityId;\n    \n    // shared attribiutes\n    attributeService.getEntityAttributesValues(\n        entityType,\n        entityId,\n        types.attributesScope.shared.value,\n        [\n            \"fw_v\", \n            \"fw_url\", \n            \"fw_md5\", \n            \"was_int\", \n            \"wes_int\",\n            \"sm_int\",\n            \"ch_int\", \n            \"do_ota\", \n            \"do_reboot\",\n            \"do_format\",\n            \"do_rtc\",\n            \"fo_en\",\n            \"do_fo_scan\",\n            \"data_id\"\n        ]\n    ).then(\n        function success(data) {\n            data.forEach(({key, value}) => {\n                $scope[key] = value;\n            });\n        },\n        function fail() {\n            toast.showError('Could not find default paramaters', angular.element(self.ctx.$container), 'bottom right');\n        }\n    );\n    \n    // server attributes\n    attributeService.getEntityAttributesValues(\n        entityType,\n        entityId,\n        types.attributesScope.server.value,\n        [\n            \"lastActivityTime\"\n        ]\n    ).then(\n        function success(data) {\n            var m = data.pop();\n            $scope[m.key] = new Date(m.value).toString();\n        },\n        function fail() {\n            toast.showError('Could not find default paramaters', angular.element(self.ctx.$container), 'bottom right');\n        }\n    );\n}\n\nself.typeParameters = function () {\n    return {\n        dataKeysOptional: true,\n        maxDatasources: 1\n    };\n};\n",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Eliot Device Widget\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    }
  ]
}